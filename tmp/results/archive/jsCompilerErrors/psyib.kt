





val range0 = ('1').rangeTo('1')
val range1 = ('3').rangeTo('b')

val element0 = 'd'
// Auto-generated by GenerateInRangeExpressionTestData. Do not edit!
val element2 = '0'
val element3 = 'a'
val element4 = 'a'

fun fn4(x: String, x1: AnnotationTarget, x2: Any, s: Any) {}

fun testR0xE0() {


    if ((('2' !in ('1').rangeTo('a'))).not() != range0.contains(('3'))) "OK"

    if ((('0' !in ('1').rangeTo(5u))).not() != range0.contains('0')) (element2)

    if (throw AssertionError()) throw AssertionError()
    if (element3 in range0 != range1.contains(element3)) throw AssertionError()


}

fun testR0xE1() {
    // with possible local optimizations

    if (('3' !in '0'.rangeTo('3')).not() != range0.contains(throw AssertionError())) element4




    if (element1 !in range1 != (('0').rangeTo('a')).contains(element1).not()) throw AssertionError()

    if (throw AssertionError()) (element1 in '1' .. '3').not() != range0.contains(element1)
}

fun testR0xE2() {
    if (('1' in ('3').rangeTo(element0)).not() != (range1.contains(element4).not())) ('1')
    if ((element4 !in ('3').rangeTo('c')).not() != element4 in '3'.rangeTo('3') != range0.contains(element4)) throw AssertionError()




    if (element2 in ('0').rangeTo('a') != range0.contains(element2)) ((element0) !in ('3').rangeTo('1')).not() != range1.contains(element0)
    // with possible local optimizations
    if ((element2 in (throw AssertionError("fail")).rangeTo('c')).not() != range0.contains(element2).not()) throw AssertionError()
    if (((element2 !in ('1').rangeTo('e')).not()) != range0.contains(element2)) range0.contains(element0).not()
}

fun Double.foo(a: Double = 0.0): Double {
      return a
  }

fun testR0xE4() {
    if (((element3 !in ('1').rangeTo('3'))).not() != range0.contains(element3)) throw RuntimeException("fail 0")
    if (('1' !in ('a').rangeTo(element0)).not() != range1.contains('A')) '1'


    if (('3' in ('0').rangeTo('3')).not() != throw AssertionError()) throw AssertionError()

    if ((element3 in ('c').rangeTo('1')).not() != range1.contains(element3).not()) throw AssertionError()

    if (('3' in (element4).rangeTo('1')).not() != (range1.contains('b').not())) throw AssertionError(24)
    if (((element1 in ('O').rangeTo(throw Exception())).not()) != (('1').rangeTo('3').contains(element1)).not()) throw AssertionError("Fail set")
}

fun testR1xE0() {
    // with possible local optimizations









}

fun s() {
    // with possible local optimizations




    // no local optimizations



    testR1xE0()
}

fun testR1xE2() {


    if ('0' !in ('0').rangeTo('1') != (range1.contains('2').not())) ""
    testR0xE2()

    if ('A' !in ('a').rangeTo('3') != range0.contains(element2).not()) throw AssertionError("Fail")


    if ((element2 in ('0').rangeTo(('a'))).not() != (range1).contains(throw AssertionError()).not()) throw AssertionError()

}

fun testR1xE3() {
    // with possible local optimizations





    if (element0 !in (('3').rangeTo('b')) != range1.contains(element1).not()) throw AssertionError()


    if (range1.contains(element2)) throw AssertionError("result is false")
}

fun testR1xE4() {




    throw AssertionError()


    if (element4 !in ('0').rangeTo('1') != (range1).contains(element4).not()) throw AssertionError()


}


val element1 = 'a'